#+TITLE: Henry's Emacs Theme Testing Sample
#+AUTHOR: Henry Newcomer
#+DATE: [2024-07-16 Tue]

* Introduction
This Org file is designed to showcase various elements and programming languages to test my Emacs themes. It includes different levels of headings, lists, text formatting, code blocks, and more.

** Purpose
- To provide a comprehensive test file for Emacs themes
- =To= ~demonstrate~  _various_ +syntax+ **highlighting** /scenarios/
- To showcase Org-mode features

* Text Formatting
Let's explore various text formatting options:

- *Bold text* for emphasis
- /Italic text/ for subtle emphasis
- _Underlined text_ for extra emphasis
- =Verbatim text= for code or commands
- ~Code text~ for inline code
- +Strikethrough text+ for deleted content
# subscript
- Super^sup for exponents

You can also combine these: *_Bold and underlined_* or /_Italic and bold_/

** Lists
*** Unordered Lists
- Item 1
  - Subitem 1.1
  - Subitem 1.2
    - Subsubitem 1.2.1
- Item 2
- Item 3

*** Ordered Lists
1. First item
2. Second item
   1) Subitem 2.1
   2) Subitem 2.2
3. Third item

*** Definition Lists
- Term 1 :: Definition 1
- Term 2 :: Definition 2
- Term 3 :: Definition 3

** Tables
| Name    | Age | Occupation  |
|---------+-----+-------------|
| Alice   |  28 | Engineer    |
| Bob     |  35 | Designer    |
| Charlie |  42 | Manager     |
| David   |  31 | Developer   |

** Links
- [[https://www.gnu.org/software/emacs/][Emacs Official Website]]
- [[file:~/Documents/notes.org][My Notes]]
- [[mailto:example@example.com][Email me]]

* Programming Languages
Now, let's showcase various programming languages with syntax highlighting.

** Python
#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt

def plot_sine_wave(amplitude, frequency, phase):
    x = np.linspace(0, 2*np.pi, 1000)
    y = amplitude * np.sin(frequency * x + phase)

    plt.figure(figsize=(10, 6))
    plt.plot(x, y)
    plt.title(f"Sine Wave (A={amplitude}, f={frequency}, Ï†={phase})")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.grid(True)
    plt.show()

plot_sine_wave(1, 2, np.pi/4)
#+END_SRC

** JavaScript
#+BEGIN_SRC javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  sayHello() {
    console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`);
  }
}

const people = [
  new Person("Alice", 28),
  new Person("Bob", 35),
  new Person("Charlie", 42)
];

people.forEach(person => person.sayHello());

const adultNames = people
  .filter(person => person.age >= 18)
  .map(person => person.name);

console.log("Adult names:", adultNames);
#+END_SRC

** Lisp (Emacs Lisp)
#+BEGIN_SRC emacs-lisp
(defun factorial (n)
  "Calculate the factorial of a non-negative integer N."
  (if (<= n 1)
      1
    (* n (factorial (- n 1)))))

(defun fibonacci (n)
  "Calculate the Nth Fibonacci number."
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (t (+ (fibonacci (- n 1))
              (fibonacci (- n 2))))))

(let ((numbers '(5 7 10)))
  (dolist (num numbers)
    (message "Factorial of %d is %d" num (factorial num))
    (message "Fibonacci number %d is %d" num (fibonacci num))))

(defun greet (name)
  "Greet the person with the given NAME."
  (interactive "sEnter your name: ")
  (message "Hello, %s!" name))

(global-set-key (kbd "C-c g") 'greet)
#+END_SRC
